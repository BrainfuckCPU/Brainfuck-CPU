/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package control.logic.generator

import control.logic.generator.ControlSignal.*
import java.io.File

val instructions: List<Command> = listOf(
    Command(0x00) {
        microstep()
        endStep()
    },
    Command(0x01) { microstep(HLT) },
    Command(0x02) { microstep(RST) },
    Command(0x03) {
        microstep(TMO, CI)
        microstep(CUI)
        microstep(CO, TMI)
        endStep()
    },
    Command(0x04) {
        microstep(TMO, CI)
        microstep(CUD)
        microstep(CO, TMI)
        endStep()
    },
    Command(0x05) {
        microstep(TCU)
        endStep()
    },
    Command(0x06) {
        microstep(TCD)
        endStep()
    },
    Command(0x07) {
        microstep(TMO, IOI)
        endStep()
    },
    Command(0x08) {
        microstep(IOO, TMI)
        endStep()
    }
)

fun main() {
    val content = instructions.flatMap {
        it.getMicrostepList()
            .map { value ->
                var string = Integer.toBinaryString(value).padStart(16, '0')
                string = "0b$string"
                string
            }.toList()
    }.joinToString(",")

    val contentFile = File.createTempFile("debug", ".txt")
    contentFile.writeText(content)
    Runtime.getRuntime().exec("xdg-open ${contentFile.absoluteFile}")

    val file = File.createTempFile("debug", ".csv")
    val builder = StringBuilder()

    builder.appendLine(values().reversed().joinToString(",") { it.name })
    instructions
        .flatMap { it.getMicrostepList().toList() }
        .map { Integer.toBinaryString(it).padStart(16, '0') }
        .map { it.toCharArray().joinToString(",") }
        .forEach(builder::appendLine)

    file.writeText(builder.toString())
//    Runtime.getRuntime().exec("xdg-open ${file.absoluteFile}")
}

class Command(
    val instruction: Int,
    body: Command.() -> Unit
) {
    private val microsteps: MutableList<List<ControlSignal>> = ArrayList().apply()

    init {
        body()
    }

    fun microstep(vararg signal: ControlSignal) {
        microsteps.add(signal.toList())
    }

    fun endStep() = microstep(PCE, RSM)

    fun getMicrostepList(): Array<Int> {
        return Array(8) {
            microsteps.getOrNull(it)
                ?.nullOnEmpty()
                ?.map { step -> 1 shl step.ordinal }
                ?.reduce { acc, i -> acc or i } ?: 0
        }
    }
}

enum class ControlSignal {
    HLT, RST, RSM, PCE, PCD, PMO, TMO, TMI, TCU, TCD, CUI, CUD, CI, CO, IOI, IOO
}

fun <T> Collection<T>.nullOnEmpty(): Collection<T>? =
    if (isEmpty()) {
        null
    } else {
        this
    }